{"version":3,"file":"static/js/602.b62dd1d8.chunk.js","mappings":"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","sources":["components/Banner/index.jsx","features/Auth/components/Title/index.jsx","features/Auth/components/ButtonAction/index.jsx","features/Auth/components/LogIn/index.jsx","features/Auth/components/Register/index.jsx","features/Auth/components/ForgotPassword/index.jsx","features/Auth/pages/Main/index.jsx","constants/sounds.js","utils/PlaySound.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Container, Flex, Heading, Text, Link } from '@chakra-ui/react'\r\nimport IMAGES from '../../constants/images';\r\nimport { ChevronRightIcon } from '@chakra-ui/icons'\r\nimport { AiOutlineRight } from \"react-icons/ai\";\r\n\r\nBanner.propTypes = {\r\n    heading: PropTypes.string\r\n};\r\n\r\nfunction Banner(props) {\r\n    return (\r\n        <Container\r\n            margin='0'\r\n            padding='0'\r\n            maxWidth='100%'\r\n            width='auto'\r\n            backgroundImage={IMAGES.Banner}\r\n            height='212'\r\n            marginTop='148px'\r\n            padding='64px 0'\r\n            backgroundSize={'cover'}\r\n            backgroundRepeat='no-repeat'\r\n            backgroundPosition='center center'\r\n            position='relative'\r\n            backgroundSize='cover'\r\n        >\r\n            <Container\r\n                margin='0 190px'\r\n                padding='0'\r\n                maxWidth='100%'\r\n                width='auto'\r\n            >\r\n                <Heading\r\n                    color='#fff'\r\n                    fontSize='60px'\r\n                >\r\n                    {props.heading}\r\n                </Heading>\r\n                <Flex alignItems='center' justifyContent='center' borderRadius='5px' background='#D61C62' height='30px' maxWidth='180px' padding='5px 30px'>\r\n                    <Link lineHeight='14px' fontSize='14px' fontWeight='400' color='#fff'> Home</Link>\r\n                    <ChevronRightIcon color='#fff' />\r\n                    <Text lineHeight='14px' fontSize='14px' fontWeight='400' color='#cecece'>{props.heading}</Text>\r\n                </Flex>\r\n            </Container>\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Banner;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Heading, Text } from '@chakra-ui/react';\r\n\r\nTitle.propTypes = {\r\n   title: PropTypes.string,\r\n   subtitle: PropTypes.string,\r\n};\r\n\r\nTitle.defaultProps = {\r\n   title: 'title',\r\n   subtitle: 'subtitle',\r\n}\r\n\r\nfunction Title(props) {\r\n   const { title, subtitle } = props;\r\n   return (\r\n      <>\r\n         <Heading\r\n            as='h2'\r\n            size='xl'\r\n            textTransform={'uppercase'}\r\n         >\r\n            {title}\r\n         </Heading>\r\n         <Text\r\n            fontSize='2xl'\r\n            marginBottom={'25px'}\r\n         //textAlign='center'\r\n         >\r\n            {subtitle}\r\n         </Text>\r\n      </>\r\n   );\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Flex, Link, Text } from '@chakra-ui/react';\r\nimport { Link as ReactRouterDom_Link, useLocation } from 'react-router-dom';\r\n\r\nButtonAction.propTypes = {\r\n   action: PropTypes.string,\r\n   question: PropTypes.string,\r\n   direction: PropTypes.string,\r\n   isLoading: PropTypes.bool,\r\n};\r\n\r\nButtonAction.defaultProps = {\r\n   action: '',\r\n   question: '',\r\n   direction: '',\r\n   isLoading: false,\r\n};\r\n\r\nfunction ButtonAction(props) {\r\n   const { action, question, direction, isLoading } = props;\r\n   const { pathname } = useLocation();\r\n\r\n   return (\r\n      <>\r\n         <Button\r\n            type='submit'\r\n\r\n            colorScheme='pink'\r\n\r\n            width={'100%'}\r\n            h='50px'\r\n            size={'lg'}\r\n\r\n            marginTop='25px'\r\n            paddingY={'4'}\r\n            paddingX={'0'}\r\n\r\n            //bgGradient='linear(to-tr, pink.300, red.300)'\r\n            bg={'#D61C62'}\r\n\r\n            _hover={{\r\n               bgGradient: 'linear(to-tr, #D61C62, pink.300)',\r\n            }}\r\n            isLoading={isLoading}\r\n         >\r\n            {action}\r\n         </Button>\r\n\r\n         {question !== '' ?\r\n            <Flex\r\n               justify={'center'}\r\n               marginTop={'4'}\r\n            >\r\n               <Text fontSize='md'> {question}?&nbsp;\r\n                  <Link\r\n                     as={ReactRouterDom_Link}\r\n                     to={pathname === '/login' ? '/register' : '/login'}\r\n                     _hover={{\r\n                        color: 'pink.500',\r\n                     }}\r\n                  >\r\n                     {direction}\r\n                  </Link>\r\n               </Text>\r\n            </Flex>\r\n            :\r\n            ''\r\n         }\r\n      </>\r\n   );\r\n}\r\n\r\nexport default ButtonAction;","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\nimport Title from '../Title';\r\nimport { Alert, AlertIcon, Button, Checkbox, Flex, FormControl, FormErrorMessage, FormLabel, Icon, Input, InputGroup, InputLeftElement, InputRightElement, Link, Spacer } from '@chakra-ui/react';\r\nimport { RiUser3Fill } from 'react-icons/ri';\r\nimport { RiLockPasswordFill } from 'react-icons/ri';\r\nimport { BiShowAlt, BiHide } from 'react-icons/bi';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport ButtonAction from '../ButtonAction';\r\nimport { Link as ReactRouterDom_Link, useNavigate, Navigate } from 'react-router-dom';\r\nimport { clearMessage } from '../../../../app/messageSlice';\r\nimport { login } from '../../authSlice';\r\nimport Cookies from 'universal-cookie';\r\nimport { playWrongSound_audio } from '../../../../utils/PlaySound';\r\n\r\nLogIn.propTypes = {\r\n\r\n};\r\n\r\nconst loginSchema = yup.object().shape({\r\n   userName: yup\r\n      .string()\r\n      .required('⚠ Username invalid'),\r\n   password: yup\r\n      .string()\r\n      .required('⚠ Password invalid'),\r\n});\r\n\r\nconst current = new Date();\r\nconst nextYear = new Date();\r\nnextYear.setFullYear(current.getFullYear() + 1);\r\n\r\nfunction LogIn(props) {\r\n   const dispatch = useDispatch();\r\n   const navigate = useNavigate();\r\n\r\n   const [showPassword, setShowPassword] = useState(false);\r\n   const [check, setCheck] = useState(false);\r\n\r\n   const { isLoading } = useSelector((state) => state.auth);\r\n   const { message } = useSelector((state) => state.message);\r\n\r\n   const cookies = new Cookies();\r\n\r\n   const { register, handleSubmit, reset, formState: { errors }, setValue, watch } = useForm({\r\n      mode: 'all',\r\n      resolver: yupResolver(loginSchema),\r\n      defaultValues: {\r\n         userName: '',\r\n         password: '',\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      dispatch(clearMessage());\r\n   }, [dispatch]);\r\n\r\n   useEffect(() => {\r\n      const loginData = cookies.get('loginData') ? cookies.get('loginData') : null;\r\n\r\n      if (loginData !== null) {\r\n         setValue(\"userName\", atob(loginData.userName), {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n         });\r\n         setValue(\"password\", atob(loginData.password), {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n         });\r\n         setShowPassword(true);\r\n         setCheck(true);\r\n      }\r\n   }, []);\r\n\r\n   const userName_watch = watch('userName');\r\n   const password_watch = watch('password');\r\n   useEffect(() => {\r\n      if (check === true) {\r\n         cookies.remove('loginData');\r\n         const data = {\r\n            userName: btoa(userName_watch),\r\n            password: btoa(password_watch),\r\n         };\r\n         cookies.set('loginData', JSON.stringify(data), { path: '/', expires: nextYear, });\r\n      }\r\n      else {\r\n         cookies.remove('loginData');\r\n      }\r\n   }, [userName_watch, password_watch, check]);\r\n\r\n   const _onSubmitForm = async (data) => {\r\n      console.log(\">>> Check login\", data);\r\n\r\n      const params = {\r\n         username: data.userName,\r\n         password: data.password,\r\n      };\r\n\r\n      dispatch(login(params))\r\n         .unwrap()\r\n         .then((response) => {\r\n            console.log(\">>> Check login/response - success: \", response);\r\n            navigate('/home');\r\n         })\r\n         .catch((response) => {\r\n            console.log('>>> Check login/response - errors: ', response);\r\n            reset({\r\n               userName: '',\r\n               password: '',\r\n            }, {\r\n               keepErrors: true,\r\n               keepDirty: true,\r\n               keepIsSubmitted: false,\r\n               keepTouched: false,\r\n               keepIsValid: false,\r\n               keepSubmitCount: false,\r\n            });\r\n            playWrongSound_audio();\r\n         });\r\n   };\r\n\r\n   return (\r\n      <>\r\n         {message &&\r\n            <Alert\r\n               status='error'\r\n               variant='left-accent'\r\n               marginBottom={'15px'}\r\n               borderRadius='xl'\r\n            >\r\n               <AlertIcon />\r\n               {message}\r\n            </Alert>}\r\n         <Title\r\n            title='Log in'\r\n            subtitle='Log in to explore other features'\r\n         />\r\n         <form onSubmit={handleSubmit(_onSubmitForm)}>\r\n            <FormControl\r\n               isRequired\r\n               marginBottom={'4'}\r\n\r\n               isInvalid={!!errors?.userName?.message}\r\n               errortext={errors?.userName?.message}\r\n            >\r\n               <FormLabel\r\n                  fontSize={'xl'}\r\n               >\r\n                  Username\r\n               </FormLabel>\r\n               <InputGroup>\r\n                  <InputLeftElement\r\n                     pointerEvents={'none'}\r\n                     children={<Icon as={RiUser3Fill} color={'gray.300'} />}\r\n                     height={'100%'}\r\n                     fontSize='xl'\r\n                  />\r\n                  <Input\r\n                     placeholder='ThangCuteee'\r\n                     bg={'blackAlpha.200'}\r\n                     focusBorderColor='pink.300'\r\n                     lineHeight={'3'}\r\n                     h='60px'\r\n                     variant='filled'\r\n                     size='lg'\r\n                     boxShadow={'md'}\r\n                     fontSize='md'\r\n                     fontWeight={'semibold'}\r\n                     {...register('userName')}\r\n                  />\r\n               </InputGroup>\r\n               <FormErrorMessage>\r\n                  {errors?.userName?.message}\r\n               </FormErrorMessage>\r\n            </FormControl>\r\n\r\n            <FormControl\r\n               isRequired\r\n               marginBottom={'4'}\r\n\r\n               isInvalid={!!errors?.userName?.message}\r\n               errortext={errors?.userName?.message}\r\n            >\r\n               <FormLabel\r\n                  fontSize={'xl'}\r\n               >\r\n                  Password\r\n               </FormLabel>\r\n               <InputGroup>\r\n                  <InputLeftElement\r\n                     pointerEvents={'none'}\r\n                     children={<Icon as={RiLockPasswordFill} color={'gray.300'} />}\r\n                     height={'100%'}\r\n                     fontSize='xl'\r\n                  />\r\n                  <Input\r\n                     type={showPassword ? 'text' : 'password'}\r\n                     placeholder={showPassword ? 'ZzzThangducDuongVipPro123Zzz' : '*************'}\r\n                     bg={'blackAlpha.200'}\r\n                     focusBorderColor='pink.300'\r\n                     lineHeight={'3'}\r\n                     h='60px'\r\n                     variant='filled'\r\n                     size='lg'\r\n                     boxShadow={'md'}\r\n                     fontSize='md'\r\n                     fontWeight={'semibold'}\r\n                     {...register('password')}\r\n                  />\r\n                  <InputRightElement\r\n                     height={'100%'}\r\n                     width='2rem'\r\n                     marginRight={2}\r\n                  >\r\n                     <Button bg={'gray.200'} size='sm' onClick={() => { setShowPassword(!showPassword) }}>\r\n                        {showPassword ? <Icon as={BiShowAlt} /> : <Icon as={BiHide} />}\r\n                     </Button>\r\n                  </InputRightElement>\r\n               </InputGroup>\r\n               <FormErrorMessage>\r\n                  {errors?.password?.message}\r\n               </FormErrorMessage>\r\n            </FormControl>\r\n\r\n            <Flex>\r\n               <Checkbox\r\n                  size='md'\r\n                  colorScheme='pink'\r\n                  isChecked={check}\r\n                  onChange={() => { setCheck(!check) }}\r\n               >\r\n                  Remember me\r\n               </Checkbox>\r\n               <Spacer />\r\n               <Link\r\n                  as={ReactRouterDom_Link}\r\n                  to='/forgot-password'\r\n                  _hover={{\r\n                     color: 'pink.500',\r\n                  }}\r\n               >\r\n                  Forgot Your Password?\r\n               </Link>\r\n            </Flex>\r\n\r\n            <ButtonAction\r\n               action='LOG IN'\r\n               question='Not registered'\r\n               direction='Create a account'\r\n               isLoading={isLoading}\r\n            />\r\n         </form>\r\n      </>\r\n   );\r\n}\r\n\r\nexport default LogIn;","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\nimport Title from '../Title';\r\nimport { Alert, AlertIcon, Button, FormControl, FormErrorMessage, FormLabel, Icon, Input, InputGroup, InputLeftElement, InputRightElement, useToast } from '@chakra-ui/react';\r\nimport { HiMail } from 'react-icons/hi';\r\nimport { RiLockPasswordFill, RiUser3Fill } from 'react-icons/ri';\r\nimport { BiShowAlt, BiHide } from 'react-icons/bi';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport ButtonAction from '../ButtonAction';\r\nimport { register as registerAuth } from \"../../authSlice\";\r\nimport { clearMessage } from \"../../../../app/messageSlice\";\r\nimport { Navigate } from 'react-router-dom';\r\nimport { playCorrectSound_audio, playWrongSound_audio } from '../../../../utils/PlaySound';\r\n\r\nRegister.propTypes = {\r\n\r\n};\r\n\r\nconst registerSchema = yup.object().shape({\r\n   userName: yup\r\n      .string()\r\n      .required('⚠ Username invalid')\r\n      .min(6, '⚠ Username must be at least 6 characters')\r\n      .max(10, '⚠ Username must be at most 10 charaters'),\r\n   email: yup\r\n      .string()\r\n      .required('⚠ Email invalid')\r\n      .email('⚠ Email must be a valid email'),\r\n   password: yup\r\n      .string()\r\n      .required('⚠ Password invalid')\r\n      .min(6, '⚠ Password must be at least 6 characters')\r\n      .max(17, '⚠ Password must be at most 17 characters')\r\n      .matches(\r\n         /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n         \"⚠ Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\r\n      ),\r\n   confirmPassword: yup.string()\r\n      .required('⚠ Confirm password invalid')\r\n      .oneOf([yup.ref('password'), null], '⚠ Passwords must match'),\r\n\r\n});\r\n\r\nfunction Register(props) {\r\n   const toast = useToast();\r\n   const dispatch = useDispatch();\r\n\r\n   const { isLoading } = useSelector((state) => state.auth);\r\n   const { message } = useSelector((state) => state.message);\r\n\r\n   const [showPassword, setShowPassword] = useState(false);\r\n   const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n   const { register, handleSubmit, reset, formState: { errors } } = useForm({\r\n      mode: 'all',\r\n      resolver: yupResolver(registerSchema),\r\n      defaultValues: {\r\n         userName: '',\r\n         email: '',\r\n         password: '',\r\n         confirmPassword: '',\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      dispatch(clearMessage());\r\n   }, [dispatch]);\r\n\r\n   const _onSubmitForm = async (data) => {\r\n      console.log(\">>> Check register\", data);\r\n      if (data.password === data.confirmPassword) {\r\n         const params = {\r\n            email: data.email,\r\n            password: data.password,\r\n            username: data.userName,\r\n         };\r\n\r\n         dispatch(registerAuth(params))\r\n            .unwrap()\r\n            .then(() => {\r\n               toast({\r\n                  title: 'WELCOME !!',\r\n                  description: 'Please check your email to confirm email',\r\n                  status: 'success',\r\n                  isClosable: false,\r\n                  position: 'top',\r\n                  variant: 'left-accent',\r\n               });\r\n               playCorrectSound_audio();\r\n            })\r\n            .catch((response) => {\r\n               console.log('>>> Check register/response - errors: ', response);\r\n               reset({\r\n                  userName: '',\r\n                  email: '',\r\n                  password: '',\r\n                  confirmPassword: '',\r\n               }, {\r\n                  keepErrors: true,\r\n                  keepDirty: true,\r\n                  keepIsSubmitted: false,\r\n                  keepTouched: false,\r\n                  keepIsValid: false,\r\n                  keepSubmitCount: false,\r\n               });\r\n               playWrongSound_audio();\r\n            });\r\n      }\r\n      else {\r\n         playWrongSound_audio();\r\n         toast({\r\n            title: 'Error Occured!',\r\n            description: 'Password not match',\r\n            status: 'error',\r\n            duration: 3000,\r\n            isClosable: true,\r\n            position: 'top',\r\n            variant: 'left-accent',\r\n         });\r\n      }\r\n   };\r\n\r\n   return (\r\n      <>\r\n         {message &&\r\n            <Alert\r\n               status='error'\r\n               variant='left-accent'\r\n               marginBottom={'15px'}\r\n               borderRadius='xl'\r\n            >\r\n               <AlertIcon />\r\n               {message}\r\n            </Alert>}\r\n         <Title\r\n            title='Register'\r\n            subtitle='Register to manage your account'\r\n         />\r\n\r\n         <form onSubmit={handleSubmit(_onSubmitForm)}>\r\n            <FormControl\r\n               isRequired\r\n               marginBottom={'4'}\r\n\r\n               isInvalid={!!errors?.userName?.message}\r\n               errortext={errors?.userName?.message}\r\n            >\r\n               <FormLabel\r\n                  fontSize={'xl'}\r\n               >\r\n                  Username\r\n               </FormLabel>\r\n               <InputGroup>\r\n                  <InputLeftElement\r\n                     pointerEvents={'none'}\r\n                     children={<Icon as={RiUser3Fill} color={'gray.300'} />}\r\n                     height={'100%'}\r\n                     fontSize='xl'\r\n                  />\r\n                  <Input\r\n                     placeholder='ThangCuteee'\r\n                     bg={'blackAlpha.200'}\r\n                     focusBorderColor='pink.300'\r\n                     lineHeight={'3'}\r\n                     h='60px'\r\n                     variant='filled'\r\n                     size='lg'\r\n                     boxShadow={'md'}\r\n                     fontSize='md'\r\n                     fontWeight={'semibold'}\r\n                     {...register('userName')}\r\n                  />\r\n               </InputGroup>\r\n               <FormErrorMessage>\r\n                  {errors?.userName?.message}\r\n               </FormErrorMessage>\r\n            </FormControl>\r\n\r\n            <FormControl\r\n               isRequired\r\n               marginBottom={'4'}\r\n\r\n               isInvalid={!!errors?.email?.message}\r\n               errortext={errors?.email?.message}\r\n            >\r\n               <FormLabel\r\n                  fontSize={'xl'}\r\n               >\r\n                  Email\r\n               </FormLabel>\r\n               <InputGroup>\r\n                  <InputLeftElement\r\n                     pointerEvents={'none'}\r\n                     children={<Icon as={HiMail} color={'gray.300'} />}\r\n                     height={'100%'}\r\n                     fontSize='xl'\r\n                  />\r\n                  <Input\r\n                     placeholder='thangduc.duong14@gmail.com'\r\n                     bg={'blackAlpha.200'}\r\n                     focusBorderColor='pink.300'\r\n                     lineHeight={'3'}\r\n                     h='60px'\r\n                     variant='filled'\r\n                     size='lg'\r\n                     boxShadow={'md'}\r\n                     fontSize='md'\r\n                     fontWeight={'semibold'}\r\n                     {...register('email')}\r\n                  />\r\n               </InputGroup>\r\n               <FormErrorMessage>\r\n                  {errors?.email?.message}\r\n               </FormErrorMessage>\r\n            </FormControl>\r\n\r\n            <FormControl\r\n               isRequired\r\n               marginBottom={'4'}\r\n\r\n               isInvalid={!!errors?.password?.message}\r\n               errortext={errors?.password?.message}\r\n            >\r\n               <FormLabel\r\n                  fontSize={'xl'}\r\n               >\r\n                  Password\r\n               </FormLabel>\r\n               <InputGroup>\r\n                  <InputLeftElement\r\n                     pointerEvents={'none'}\r\n                     children={<Icon as={RiLockPasswordFill} color={'gray.300'} />}\r\n                     height={'100%'}\r\n                     fontSize='xl'\r\n                  />\r\n                  <Input\r\n                     type={showPassword ? 'text' : 'password'}\r\n                     placeholder={showPassword ? 'ZzzThangducDuongVipPro123Zzz' : '*************'}\r\n                     bg={'blackAlpha.200'}\r\n                     focusBorderColor='pink.300'\r\n                     lineHeight={'3'}\r\n                     h='60px'\r\n                     variant='filled'\r\n                     size='lg'\r\n                     boxShadow={'md'}\r\n                     fontSize='md'\r\n                     fontWeight={'semibold'}\r\n                     {...register('password')}\r\n                  />\r\n                  <InputRightElement\r\n                     height={'100%'}\r\n                     width='2rem'\r\n                     marginRight={2}\r\n                  >\r\n                     <Button bg={'gray.200'} size='sm' onClick={() => { setShowPassword(!showPassword) }}>\r\n                        {showPassword ? <Icon as={BiShowAlt} /> : <Icon as={BiHide} />}\r\n                     </Button>\r\n                  </InputRightElement>\r\n               </InputGroup>\r\n               <FormErrorMessage>\r\n                  {errors?.password?.message}\r\n               </FormErrorMessage>\r\n            </FormControl>\r\n\r\n            <FormControl\r\n               isRequired\r\n               marginBottom={'4'}\r\n\r\n               isInvalid={!!errors?.confirmPassword?.message}\r\n               errortext={errors?.confirmPassword?.message}\r\n            >\r\n               <FormLabel\r\n                  fontSize={'xl'}\r\n               >\r\n                  Confirmed Password\r\n               </FormLabel>\r\n               <InputGroup>\r\n                  <InputLeftElement\r\n                     pointerEvents={'none'}\r\n                     children={<Icon as={RiLockPasswordFill} color={'gray.300'} />}\r\n                     height={'100%'}\r\n                     fontSize='xl'\r\n                  />\r\n                  <Input\r\n                     type={showConfirmPassword ? 'text' : 'password'}\r\n                     placeholder={showConfirmPassword ? 'ZzzThangducDuongVipPro123Zzz' : '*************'}\r\n                     bg={'blackAlpha.200'}\r\n                     focusBorderColor='pink.300'\r\n                     lineHeight={'3'}\r\n                     h='60px'\r\n                     variant='filled'\r\n                     size='lg'\r\n                     boxShadow={'md'}\r\n                     fontSize='md'\r\n                     fontWeight={'semibold'}\r\n                     {...register('confirmPassword')}\r\n                  />\r\n                  <InputRightElement\r\n                     height={'100%'}\r\n                     width='2rem'\r\n                     marginRight={2}\r\n                  >\r\n                     <Button bg={'gray.200'} size='sm' onClick={() => { setShowConfirmPassword(!showConfirmPassword) }}>\r\n                        {showConfirmPassword ? <Icon as={BiShowAlt} /> : <Icon as={BiHide} />}\r\n                     </Button>\r\n                  </InputRightElement>\r\n               </InputGroup>\r\n               <FormErrorMessage>\r\n                  {errors?.confirmPassword?.message}\r\n               </FormErrorMessage>\r\n            </FormControl>\r\n\r\n            <ButtonAction\r\n               action='REGISTER'\r\n               question='Do you have an account'\r\n               direction='Login'\r\n               isLoading={isLoading}\r\n            />\r\n         </form>\r\n      </>\r\n   );\r\n}\r\n\r\nexport default Register;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Box, Text, Flex, Icon, Button, FormControl, InputGroup, InputLeftElement, Input, FormErrorMessage, useToast } from '@chakra-ui/react';\r\nimport { IoMdArrowBack } from 'react-icons/io';\r\nimport { HiMail } from 'react-icons/hi';\r\nimport ButtonAction from '../ButtonAction';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport authApi from '../../../../api/authApi';\r\n\r\nForgotPassword.propTypes = {\r\n\r\n};\r\n\r\nconst forgotPasswordSchema = yup.object().shape({\r\n   email: yup\r\n      .string()\r\n      .email('⚠ Email must be a valid email')\r\n      .required('⚠ Email invalid'),\r\n});\r\n\r\nfunction ForgotPassword(props) {\r\n   const toast = useToast();\r\n   const [loading, setLoading] = useState(false);\r\n\r\n   const navigate = useNavigate();\r\n\r\n   const { register, handleSubmit, reset, formState: { errors } } = useForm({\r\n      mode: 'all',\r\n      resolver: yupResolver(forgotPasswordSchema),\r\n      defaultValues: {\r\n         email: '',\r\n      },\r\n   });\r\n\r\n   const _onSubmitForm = async (data) => {\r\n      console.log(\">>> Check forgot password\", data);\r\n      setLoading(true);\r\n      try {\r\n         const params = {\r\n            email: data.email,\r\n         };\r\n\r\n         const response = await authApi.forgotPassword(params);\r\n         console.log('>>> Check forgot password/response: ', response);\r\n\r\n         toast({\r\n            title: 'New password temp was sent. Pleas check your email!!',\r\n            description: response.data.message,\r\n            status: 'success',\r\n            position: 'top',\r\n            variant: 'left-accent',\r\n         });\r\n      } catch (error) {\r\n         console.log('>>> Check forgot password/response - errors: ', error.response);\r\n         toast({\r\n            title: 'Error Occured!',\r\n            description: error.response.data.message,\r\n            status: 'error',\r\n            duration: 3000,\r\n            isClosable: true,\r\n            position: 'top',\r\n         });\r\n         reset();\r\n      }\r\n      finally {\r\n         setLoading(false);\r\n      }\r\n   };\r\n\r\n   return (\r\n      <Box\r\n         bg='white'\r\n         w='100%'\r\n         p={4}\r\n         color='black'\r\n         boxShadow={'dark-lg'}\r\n      >\r\n         <Flex\r\n            direction={'row'}\r\n            justify='center'\r\n            align={'center'}\r\n            w={'100%'}\r\n            marginBottom='10'\r\n            marginX='auto'\r\n         >\r\n            <Button\r\n               bg={'transparent'}\r\n               padding='0'\r\n               _hover={{\r\n                  bg: 'transparent',\r\n                  color: '#D61C62',\r\n               }}\r\n               onClick={() => { navigate('/login') }}\r\n            >\r\n               <Icon fontSize={'2xl'} as={IoMdArrowBack} />\r\n            </Button>\r\n\r\n            <Text\r\n               fontSize='3xl'\r\n               color={'blackAlpha.800'}\r\n               textAlign='center'\r\n               w='100%'\r\n               marginRight={'1.5rem'}\r\n            >\r\n               Reset Password\r\n            </Text>\r\n         </Flex>\r\n\r\n         <form onSubmit={handleSubmit(_onSubmitForm)}>\r\n            <FormControl\r\n               isRequired\r\n               marginBottom={'4'}\r\n\r\n               isInvalid={!!errors?.email?.message}\r\n               errortext={errors?.email?.message}\r\n            >\r\n               <InputGroup>\r\n                  <InputLeftElement\r\n                     pointerEvents={'none'}\r\n                     children={<Icon as={HiMail} color={'gray.300'} />}\r\n                     height={'100%'}\r\n                     fontSize='xl'\r\n                  />\r\n                  <Input\r\n                     placeholder='thangduc.duong14@gmail.com'\r\n                     bg={'blackAlpha.200'}\r\n                     focusBorderColor='pink.300'\r\n                     lineHeight={'3'}\r\n                     h='60px'\r\n                     variant='filled'\r\n                     size='lg'\r\n                     boxShadow={'md'}\r\n                     fontSize='md'\r\n                     fontWeight={'semibold'}\r\n                     {...register('email')}\r\n                  />\r\n               </InputGroup>\r\n               <FormErrorMessage>\r\n                  {errors?.email?.message}\r\n               </FormErrorMessage>\r\n            </FormControl>\r\n\r\n            <ButtonAction\r\n               action='NEXT'\r\n               isLoading={loading}\r\n            />\r\n         </form>\r\n      </Box>\r\n   );\r\n}\r\n\r\nexport default ForgotPassword;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Box, Container } from '@chakra-ui/react';\r\nimport Banner from '../../../../components/Banner';\r\nimport LogIn from '../../components/LogIn';\r\nimport Register from '../../components/Register';\r\nimport ForgotPassword from '../../components/ForgotPassword';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nMainPages.propTypes = {\r\n\r\n};\r\n\r\nfunction MainPages(props) {\r\n   const { pathname } = useLocation();\r\n   console.log('>>> Check location: ', pathname);\r\n\r\n   const redirect = () => {\r\n      if (pathname === '/login') {\r\n         return <LogIn />;\r\n      }\r\n\r\n      if (pathname === '/register') {\r\n         return <Register />;\r\n      }\r\n\r\n      if (pathname === '/forgot-password') {\r\n         return <ForgotPassword />;\r\n      }\r\n   }\r\n\r\n   const titleBanner = () => {\r\n      if (pathname === '/login') {\r\n         return 'Login';\r\n      }\r\n\r\n      if (pathname === '/register') {\r\n         return 'Register';\r\n      }\r\n\r\n      if (pathname === '/forgot-password') {\r\n         return 'Forgot Password';\r\n      }\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <Banner\r\n            heading={titleBanner()}\r\n         />\r\n         <Box>\r\n            <Container\r\n               maxW={'xl'}\r\n               padding='12'\r\n               marginX={'auto'}\r\n            >\r\n               {\r\n                  redirect()\r\n               }\r\n            </Container>\r\n         </Box>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default MainPages;","import wrongSound from '../assets/sounds/wrong.mp3';\r\nimport correctSound from '../assets/sounds/correct.mp3';\r\n\r\nconst Sounds = {\r\n   WRONG_SOUND: wrongSound,\r\n   CORRECT_SOUND: correctSound,\r\n};\r\n\r\nexport default Sounds;","import Sounds from \"../constants/sounds\";\r\n\r\nconst wrongSound_audio = new Audio(Sounds.WRONG_SOUND);\r\nconst correctSound_audio = new Audio(Sounds.CORRECT_SOUND);\r\n\r\nexport const playWrongSound_audio = () => {\r\n   wrongSound_audio.play();\r\n};\r\n\r\nexport const pauseWrongSound_audio = () => {\r\n   wrongSound_audio.pause();\r\n};\r\n\r\nexport const playCorrectSound_audio = () => {\r\n   correctSound_audio.play();\r\n};\r\n\r\nexport const pauseCorrectSound_audio = () => {\r\n   correctSound_audio.pause();\r\n};"],"names":["props","margin","padding","maxWidth","width","backgroundImage","IMAGES","height","marginTop","color","fontSize","heading","alignItems","justifyContent","borderRadius","background","lineHeight","fontWeight","Title","title","subtitle","as","size","textTransform","marginBottom","defaultProps","ButtonAction","action","question","direction","isLoading","pathname","useLocation","type","colorScheme","h","paddingY","paddingX","bg","_hover","bgGradient","justify","ReactRouterDom_Link","to","loginSchema","yup","shape","userName","required","password","current","Date","nextYear","setFullYear","getFullYear","dispatch","useDispatch","navigate","useNavigate","useState","showPassword","setShowPassword","check","setCheck","useSelector","state","auth","message","cookies","Cookies","useForm","mode","resolver","yupResolver","defaultValues","register","handleSubmit","reset","errors","formState","setValue","watch","useEffect","clearMessage","loginData","get","atob","shouldValidate","shouldDirty","userName_watch","password_watch","remove","data","btoa","set","JSON","stringify","path","expires","_onSubmitForm","console","log","params","username","login","unwrap","then","response","catch","keepErrors","keepDirty","keepIsSubmitted","keepTouched","keepIsValid","keepSubmitCount","playWrongSound_audio","status","variant","onSubmit","isRequired","isInvalid","errortext","pointerEvents","children","RiUser3Fill","placeholder","focusBorderColor","boxShadow","RiLockPasswordFill","marginRight","onClick","BiShowAlt","BiHide","isChecked","onChange","registerSchema","min","max","email","matches","confirmPassword","oneOf","toast","useToast","showConfirmPassword","setShowConfirmPassword","registerAuth","description","isClosable","position","playCorrectSound_audio","duration","HiMail","forgotPasswordSchema","loading","setLoading","authApi","w","p","align","marginX","IoMdArrowBack","textAlign","Banner","maxW","WRONG_SOUND","CORRECT_SOUND","wrongSound_audio","Audio","Sounds","correctSound_audio","play"],"sourceRoot":""}